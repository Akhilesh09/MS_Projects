import os

objects_path=hou.node(".").parm("import").eval()
folder=os.listdir(objects_path)

transf_nodes=list()
centroids=list()

for file in folder:
    if file.endswith(".obj"):
        path=objects_path+file
        file_node=hou.node("../mesh_group_net").createNode("file")
        file_node.parm("file").set(path)
        
        transf_node=hou.node("../mesh_group_net").createNode("xform")
        transf_node.setInput(0,file_node)
        
        transf_nodes.append(transf_node)
        
merge_node_geo=hou.node("../mesh_group_net").createNode("merge")

connect_node=hou.node("../mesh_group_net").createNode("connectivity")
connect_node.parm("connecttype").set(1)
#print(connect_node.parms())

block1_node=hou.node("../mesh_group_net").createNode("block_begin")
block2_node=hou.node("../mesh_group_net").createNode("block_begin")

merge_node_branch1=hou.node("../mesh_group_net").createNode("merge")

for i in range(1,len(transf_nodes)):
    merge_node_geo.setInput(i,transf_nodes[i])

grid_node=hou.node("../mesh_group_net").createNode("grid")

scatter_node=hou.node("../mesh_group_net").createNode("scatter")
scatter_node.setInput(0,grid_node)
scatter_node.parm("npts").set(5)

block_outer=hou.node("../mesh_group_net").createNode("block_begin")
block_outer.setInput(0,scatter_node)
block_outer.parm("method").set(1)
block_outer.parm("blockpath").set("../block_end2")

rot_attr_branch1=hou.node("../mesh_group_net").createNode("attribwrangle")
rot_attr_branch1.parm("snippet").set("@orient=rand(@class);")
rot_attr_branch1.setName("Orient_Branch1")

rot_attr_rand_branch1=hou.node("../mesh_group_net").createNode("attribrandomize")
rot_attr_rand_branch1.parm("name").set("orient")
rot_attr_branch1.setInput(0,block_outer)
rot_attr_rand_branch1.setInput(0,rot_attr_branch1)

copy_to_points_node1=hou.node("../mesh_group_net").createNode("copytopoints")
copy_to_points_node1.setInput(1,rot_attr_rand_branch1)

rot_attr_branch2=hou.node("../mesh_group_net").createNode("attribwrangle")
rot_attr_branch2.parm("snippet").set("@orient=rand(@class);")
rot_attr_branch2.setName("Orient_Branch2")

rot_attr_rand_branch2=hou.node("../mesh_group_net").createNode("attribrandomize")
rot_attr_rand_branch2.parm("name").set("orient")
rot_attr_branch2.setInput(0,block_outer)
rot_attr_rand_branch2.setInput(0,rot_attr_branch2)

copy_to_points_node2=hou.node("../mesh_group_net").createNode("copytopoints")
copy_to_points_node2.setInput(1,rot_attr_rand_branch2)

connect_node.setInput(0,merge_node_geo)

block1_node.setInput(0,connect_node)
block1_node.parm("method").set(1)
block1_node.parm("blockpath").set("../block_end1")

block2_node.setInput(0,transf_nodes[0])
block2_node.parm("blockpath").set("../block_end1")

merge_node_branch1.setInput(0,block1_node)
merge_node_branch1.setInput(1,block2_node)

centroid_node_branch2=hou.node("../mesh_group_net").createNode("extractcentroid")
centroid_node_branch2.setInput(0,block2_node)
centroid_node_branch2.parm("partitiontype").set("detail")
centroid_node_branch2.parm("method").set(2)
centroid_node_branch2.parm("output").set(2)
centroid_node_branch2.parm("centroidattrib").set("centroid_old")
centroid_node_branch2.setName("OldCentroid")

centroid_node_branch1=hou.node("../mesh_group_net").createNode("extractcentroid")
centroid_node_branch1.setInput(0,block1_node)
centroid_node_branch1.parm("partitiontype").set("detail")
centroid_node_branch1.parm("method").set(2)
centroid_node_branch1.parm("output").set(2)
centroid_node_branch1.parm("centroidattrib").set("centroid_new")
centroid_node_branch1.setName("NewCentroid")

unit_v=hou.node("../mesh_group_net").createNode("attribwrangle")
unit_v.setInput(0,centroid_node_branch1)
unit_v.parm("snippet").set("v@vector_first.x=(detail(0,\"centroid_new\",0)-detail(0,\"centroid_old\",0));v@vector_first.y=(detail(0,\"centroid_new\",1)-detail(0,\"centroid_old\",1));v@vector_first.z=(detail(0,\"centroid_new\",2)-detail(0,\"centroid_old\",2));v@unit_v=normalize(@vector_first);")
unit_v.parm("class").set(0)

offset_x=hou.node("../mesh_group_net").createNode("attribcreate")
offset_x.setInput(0,unit_v)
offset_x.parm("name1").set("xoffset")
offset_x.parm("type1").set(0)
offset_x.parm("class1").set(0)
offset_x.parm("value1v1").set("0.01")
offset_x.setName("x_offset")

offset_y=hou.node("../mesh_group_net").createNode("attribcreate")
offset_y.setInput(0,offset_x)
offset_y.parm("name1").set("yoffset")
offset_y.parm("type1").set(0)
offset_y.parm("class1").set(0)
offset_y.parm("value1v1").set("0.01")
offset_y.setName("y_offset")

offset_z=hou.node("../mesh_group_net").createNode("attribcreate")
offset_z.setInput(0,offset_y)
offset_z.parm("name1").set("zoffset")
offset_z.parm("type1").set(0)
offset_z.parm("class1").set(0)
offset_z.parm("value1v1").set("0.01")
offset_z.setName("z_offset")

transf_node_branch1=hou.node("../mesh_group_net").createNode("xform")
transf_node_branch1.setInput(0,offset_z)
transf_node_branch1.setParmExpressions({"px":'detail("../NewCentroid","centroid_new",0)'})
transf_node_branch1.setParmExpressions({"py":'detail("../NewCentroid","centroid_new",1)'})
transf_node_branch1.setParmExpressions({"pz":'detail("../NewCentroid","centroid_new",2)'})

transf_node_branch1.setParmExpressions({"tx":'@unit_v.x*(npoints("../intersectionanalysis1/"))*0.5'})
transf_node_branch1.setParmExpressions({"ty":'@unit_v.y*(npoints("../intersectionanalysis1/"))*1'})
transf_node_branch1.setParmExpressions({"tz":'@unit_v.z*(npoints("../intersectionanalysis1/"))*1'})


merge_node_branch2=hou.node("../mesh_group_net").createNode("merge")
merge_node_branch2.setInput(1,transf_node_branch1)
merge_node_branch2.setInput(2,centroid_node_branch2)

copy_to_points_node1.setInput(0,merge_node_branch1)
copy_to_points_node2.setInput(0,merge_node_branch2)

intersect_node=hou.node("../mesh_group_net").createNode("intersectionanalysis")
intersect_node.setInput(0,copy_to_points_node1)

switch_node=hou.node("../mesh_group_net").createNode("switch")
switch_node.setInput(1,intersect_node)
switch_node.setInput(2,copy_to_points_node2)
switch_node.setParmExpressions({"input":'if(npoints("../intersectionanalysis1")==0,1,2)'})

block_end_node_inner=hou.node("../mesh_group_net").createNode("block_end")
block_end_node_inner.setInput(0,switch_node)
block_end_node_inner.parm("itermethod").set(1)
block_end_node_inner.parm("method").set(0)
block_end_node_inner.parm("class").set(0)
block_end_node_inner.parm("blockpath").set("../block_begin1")
block_end_node_inner.parm("templatepath").set("../block_begin1")

block_end_node_inner.parm("maxiter").set("50")
block_end_node_inner.parm("attrib").set("class")

block_end_node_outer=hou.node("../mesh_group_net").createNode("block_end")
block_end_node_outer.setInput(0,block_end_node_inner)
block_end_node_outer.parm("itermethod").set(1)
block_end_node_outer.parm("method").set(2)
block_end_node_outer.parm("usemaxiter").set(True)
block_end_node_outer.parm("maxiter").set("1")
block_end_node_outer.parm("blockpath").set("../block_begin3")
block_end_node_outer.parm("templatepath").set("../block_begin3")
block_end_node_outer.setDisplayFlag(True)

        